import ccxt
import pandas as pd
import time
import requests
from ta.trend import ADXIndicator
from ta.volatility import AverageTrueRange
from datetime import datetime
import pytz

# Binance API setup
binance = ccxt.binance()

# Telegram Bot Setup
TELEGRAM_BOT_TOKEN = "7687461615:AAG72QIl687Nsd_uqn2JOvIrhD9n-_1NbGg"
TELEGRAM_CHAT_ID = "1141407233"

def send_telegram_alert(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print("Telegram alert sent successfully.")
        else:
            print(f"Failed to send Telegram alert: {response.text}")
    except Exception as e:
        print(f"Telegram Exception: {e}")

# Parameters
SYMBOL = "ADA/USDT"
TIMEFRAME = "15m"
ADX_THRESHOLD = 25
SMA_PERIOD = 50
LOOKBACK_PERIOD = 14
VERSION = "Version 1.01"

last_trend = None  # Track the last detected trend

def convert_to_kst(timestamp):
    utc_time = timestamp.tz_localize("UTC")
    kst_time = utc_time.astimezone(pytz.timezone("Asia/Seoul"))
    return kst_time

def fetch_data(symbol, timeframe, limit=100):
    candles = binance.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(candles, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)
    df.index = df.index.map(convert_to_kst)
    return df

def compute_indicators(df):
    df["SMA"] = df["close"].rolling(window=SMA_PERIOD).mean()
    adx = ADXIndicator(df["high"], df["low"], df["close"], window=LOOKBACK_PERIOD)
    df["ADX"] = adx.adx()
    df["+DI"] = adx.adx_pos()
    df["-DI"] = adx.adx_neg()
    atr = AverageTrueRange(df["high"], df["low"], df["close"], window=LOOKBACK_PERIOD)
    df["ATR"] = atr.average_true_range()
    return df

def detect_trend(df):
    global last_trend
    latest = df.iloc[-1]

    if latest["ADX"] > ADX_THRESHOLD:
        if latest["close"] > latest["SMA"] and latest["+DI"] > latest["-DI"]:
            trend = "Up 📈"
        elif latest["close"] < latest["SMA"] and latest["-DI"] > latest["+DI"]:
            trend = "Down 📉"
        else:
            trend = "Range ⚠️"
    else:
        trend = "Range 🔵"
    
    if trend != last_trend:
        timestamp = df.index[-1].strftime('%Y-%m-%d %H:%M:%S')
        alert_message = f" {trend} - {SYMBOL} [{timestamp}] {VERSION}"
        print(alert_message)
        send_telegram_alert(alert_message)
        last_trend = trend

def run_trend_detection():
    while True:
        df = fetch_data(SYMBOL, TIMEFRAME)
        df = compute_indicators(df)
        detect_trend(df)
        time.sleep(600)  # Run every 10 minutes

if __name__ == "__main__":
    run_trend_detection()
